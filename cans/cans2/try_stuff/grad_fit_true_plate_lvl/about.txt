Can gradient fitting find the global minimum if given the true plate
level parameters?

This is of importance for the heirarchical genetic algorithm. If we
can use a gradient method in the plate-level evaluator rather than a
second culture-level genetic algorithm, this we already have this
working and it may be faster anyway. I will provide the true plate
level parameters of a simulated full plate and check whether the
gradient method finds the true b parameters.

Two approaches:

1) Do not use a model for guessing, instead guess uniform b. Great if
   this works.

2) Use the imaginary nieghbour model to guess b parameters. In this
   case, we would need to decide on a b parameter to use for the
   faster growing neighbour and whether to keep the plate level
   parameters of the genetic algorithm or use those output by the
   guesser. Using the latter we would essentially be evolving
   parameters for the guesser. There is a limit to how close the
   output of the guesser can be to the true values. For instance, N_0
   is always guessed as the same value. Therefore I prefer the former
   method, taking the guessed bs but keeping the plate level candidate
   of the genetic algorithm. **A BETTER APPORACH MIGHT BE TO FEED THE
   PLATE LEVEL CANDIDATE VALUES TO A REWRITTEN VERSION OF THE GUESSER
   WHERE WE ONLY NEED PROVIDE A B_GUESS**. The genetic algorithm can
   either evolve both N_0 and NE_0 or just N_0, reducing the parameter
   space. The second approach is justifiable because we through away
   the data from edge cultures anyway and we can also measure the
   areas. **We could also take a value from previous fits if they are
   consitent**. It might have been better to model empty cultures
   outside of the edge cultures rather than using a different N_0 but
   I might not have time to implement this now.

   - N_0 and kn are not provided to the guesser, but inferred.
   - The ratio between N_0 and NE_0 must be provided.
   - The ratio between C_f and C_0 must provided.
   - An apporximate b_guess value for the plate and a value b_faster
     for the faster growing imaginary neighbour must be
     provided. Currently I determine the b_faster neighbour as
     1.5*b_guess. I could use a different ratio instead, but it is
     unlikely to be important; to aquire good guesses, it only matters
     that we have a b_faster value which is of around the plate
     average or higher so that we can approximate the diffusion of
     nutreints out of slow growers (could try to demonstrate this with
     simulations).

- If we have to provide multiple guesses for the gradient fitter then
  we would have to have a second level of parallelization within the
  evaluator. This is not unreasonable if it is the best method but
  would require more than the ~70 cores that our machine has. Instead,
  we could use cloud computing.


Full plate uniform b results.

We get the global minimum using a uniform b guess and constraining the
plate level parameters with the true values. Note that the simulation
includes added noise. I am now timing this.

We could also try using a higher accuracy in the rr solver.

We should also see whether guessing bs rather than using uniform is
any faster or more reliable. We could repeat the fitting with
different random parameters and see how often the global minimum is
found.

Now see if guessing is faster and whether it allows me to be less
accurate with the b_guess/b_uniform.

It took ~12 minutes to fit and find the global minimum (or at least
very close) using uniform b_guesses.

I will simulate using parameters from the top five previous best fits
of p15 (local minima) and try and time both types of b guessing. I
made these estimates using a grid of "parameters" (C_ratio, b_guess,
and whether to zero kn) which were fed to the imaginary neighbour
guesser. (I did the same for the logistic equivalent guesser but all?
of these guesses were worse.)

I will also vary the range of b_guess(==b_uniform) in both cases to
test whether the imaginary neighbour guesser is more tollerent to
uncertaity in b_guess.

I am also interested in the range of fit timings because I plan to use
the fitting in parallel evaluations of a genetic algorithm for finding
plate level parameters. These will be limited by the slowest
fit. Although each generation will take longer to evaluate, we could
use a population size greater than the number of available cores to
minimize wasted cpu time. This is a trade off between population
size/generation-generation improvement and generation evaluation time.

I am comparing the timing and mad of parameters for imaginary
neighbour guessing when using either the candidate plate level kn or
simply using the value 1.0. The same time was taken and the same
values found using for both methods so I will just suppy 1.0.

Should we allow clipping of extreme b values based on b_guess? We want
to always be finding the global minimum for a given set of plate level
parameters so if it helps us achieve this I don't see why not. We
might only run into trouble when this is not happening if it causes
the objective function to be more homogenous over parameter space and
we do not travel towards solution. Try with at first because it is
possible to get farily extreme values.
