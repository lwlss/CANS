Can gradient fitting find the global minimum if given the true plate
level parameters?

This is of importance for the heirarchical genetic algorithm. If we
can use a gradient method in the plate-level evaluator rather than a
second culture-level genetic algorithm, this we already have this
working and it may be faster anyway. I will provide the true plate
level parameters of a simulated full plate and check whether the
gradient method finds the true b parameters.

Two approaches:

1) Do not use a model for guessing, instead guess uniform b. Great if
   this works.

2) Use the imaginary nieghbour model to guess b parameters. In this
   case, we would need to decide on a b parameter to use for the
   faster growing neighbour and whether to keep the plate level
   parameters of the genetic algorithm or use those output by the
   guesser. Using the latter we would essentially be evolving
   parameters for the guesser. There is a limit to how close the
   output of the guesser can be to the true values. For instance, N_0
   is always guessed as the same value. Therefore I prefer the former
   method, taking the guessed bs but keeping the plate level candidate
   of the genetic algorithm. **A BETTER APPORACH MIGHT BE TO FEED THE
   PLATE LEVEL CANDIDATE VALUES TO A REWRITTEN VERSION OF THE GUESSER
   WHERE WE ONLY NEED PROVIDE A B_GUESS**. The genetic algorithm can
   either evolve both N_0 and NE_0 or just N_0, reducing the parameter
   space. The second approach is justifiable because we through away
   the data from edge cultures anyway and we can also measure the
   areas. **We could also take a value from previous fits if they are
   consitent**. It might have been better to model empty cultures
   outside of the edge cultures rather than using a different N_0 but
   I might not have time to implement this now.

   - N_0 and kn are not provided to the guesser, but inferred.
   - The ratio between N_0 and NE_0 must be provided.
   - The ratio between C_f and C_0 must provided.
   - An apporximate b_guess value for the plate and a value b_faster
     for the faster growing imaginary neighbour must be
     provided. Currently I determine the b_faster neighbour as
     1.5*b_guess. I could use a different ratio instead, but it is
     unlikely to be important; to aquire good guesses, it only matters
     that we have a b_faster value which is of around the plate
     average or higher so that we can approximate the diffusion of
     nutreints out of slow growers (could try to demonstrate this with
     simulations).

- If we have to provide multiple guesses for the gradient fitter then
  we would have to have a second level of parallelization within the
  evaluator. This is not unreasonable if it is the best method but
  would require more than the ~70 cores that our machine has. Instead,
  we could use cloud computing.


Full plate uniform b results.

We get the global minimum using a uniform b guess and constraining the
plate level parameters with the true values. Note that the simulation
includes added noise. I am now timing this.

We could also try using a higher accuracy in the rr solver.

We should also see whether guessing bs rather than using uniform is
any faster or more reliable. We could repeat the fitting with
different random parameters and see how often the global minimum is
found.

Now see if guessing is faster and whether it allows me to be less
accurate with the b_guess/b_uniform.

It took ~12 minutes to fit and find the global minimum (or at least
very close) using uniform b_guesses.

I will simulate using parameters from the top five previous best fits
of p15 (local minima) and try and time both types of b guessing. I
made these estimates using a grid of "parameters" (C_ratio, b_guess,
and whether to zero kn) which were fed to the imaginary neighbour
guesser. (I did the same for the logistic equivalent guesser but all?
of these guesses were worse.)

I will also vary the range of b_guess(==b_uniform) in both cases to
test whether the imaginary neighbour guesser is more tollerent to
uncertaity in b_guess.

I am also interested in the range of fit timings because I plan to use
the fitting in parallel evaluations of a genetic algorithm for finding
plate level parameters. These will be limited by the slowest
fit. Although each generation will take longer to evaluate, we could
use a population size greater than the number of available cores to
minimize wasted cpu time. This is a trade off between population
size/generation-generation improvement and generation evaluation time.

I am comparing the timing and mad of parameters for imaginary
neighbour guessing when using either the candidate plate level kn or
simply using the value 1.0. The same time was taken and the same
values found using for both methods so I will just suppy 1.0.

Should we allow clipping of extreme b values based on b_guess? We want
to always be finding the global minimum for a given set of plate level
parameters so if it helps us achieve this I don't see why not. We
might only run into trouble when this is not happening if it causes
the objective function to be more homogenous over parameter space and
we do not travel towards solution. Try with at first because it is
possible to get farily extreme values.

It may be better and quicker to not find the global minimum, for a
given plate level candidate if we are far from the true values as
these values will be discarded. However, this could potentially create
more local minima in the plate level parameter space or make the
direction of the search more difficulut to determine (I don't know).


Preliminary data.

It took 285s (4.75min) to find imaginary neighbour guesses for a full
plate. The fit then took a further 483s (8.05min).

Now that the fits have run (all but one) I am interested to see the following:

- Do we find the global minimum?
- In what time?
- Is uniform or imaginary neighbour b guessing better at the above?
- How do both methods depend on the accuracy of b_guess?

Discussion

Note: There is an error in the json files because I included plate
level parameters in the MAD. I have corrected for this in the results
below using a factor C = (384+4)/384.0.

Uniform Guessing

For uniform guessing, it does not matter what b_guess we use, we still
end up at the same minimum for each simulation. This is apparent
because all MADs between estimated and true parameter values are equal
and all objective function values are equal. This is not always the
global minumum because for imag_neigh guessing we find lower values of
objective function. It is also not the optimal solution because these
correspond to lower MADs.

Although it works well for certian parameter sets we should rule out
using the uniform guess because it will not work for all sets. We
could never be very confident that we had arrived at the global
minimum.

Imaginary Neighbour Guessing

For imaginary neighbour guessing we were able to arrive at fairly low
MADs (lowest 0.68, highest 1.43) for all simulations if the b_guess
was well chosen. All data was simulated with noise. For the level of
noise added, low parameter MAD correlates fairly well with low
objective function. For each simulation the best fit, determined by
ojective function value, corresponds to the lowest b MAD.
With mean b values of about 50 an MAD of ~1 seems resonable.

MADs (0.83, 1.43, 0.68, 0.82, 0.74)
objf (0.36, 0.39, 0.36, 0.34, 0.36)

I plotted true b vs est b for the best fit of each simulation. Very
slow growers (could be considered anomylous), which were only present
in sims 0 and 1, were overestimated. Accuracy of the estimates
increases with the size of b for all simulations. There is a lack of
parameter values between 0 and 20 in all simulations. Simulation
parameters came from previous fits (local minima) so it may be that
this is because the same thing happened in the first round of
fitting. There is another issue with potential bias in simulation
parameters which means that this may not work for real data. Because I
took parameters from the previous best gradient fits they may be
inherently easier to discover than the "real" sets.

Noise is likely to have a greater effect on cultures with lower b and
smaller cell measurement. Differences in b at small values is also
likely to cause less effect on the objective function. There may also
be a bias from the initial guess; the imaginary neighbour model finds
it hard to discern between small b and fast diffusion of nutrients to
faster growing cultures. However, I checked the correlation from the
uniform guess (sim 0) and this displayed the same behaviour. (Would
removing the fast growing neighbour help us here or would it make
other estimates worse?  Easy enough to check; set b+ to zero and
1.5*b_guess and plot b guessed vs b true for both.)

In QFA, the extreme growers are (useually) of greatest biological
interest as these are interpereted as being mutants with strongly
interacting mutations (depending on the realtive fitness of the single
mutant strains).


It looks like it is necessary to evolve a b_guess, with the plate
level parameters, to feed to the imaginary neighbour guesser. This is
essentailly evolving the guesser. Interestingly, the best b_guess for
the minimizer is not necessarily the average b_value for the
plate. Perhaps we could evolve a vector of b_guesses to give to the
guesser for each culture, however, this would be computationally slow
and we might as well discard gradient fitting all together in such
circumstances and just evolve b_guesses (True of not).


How long does it take?

Mean time for all simulations was ~43 mins

The range for all simulations was (511s, 7463s) or (8.5 mins, 124
mins). Individual simulations tended also to have smaller wide
ranges. Sometimes the best fit took the longest time but time was less
dependent on the final value of the objective function than I
expected.

This means that average generation time would be of he order 1-2 hours
if we have the same population size as number of cores.

Ranges for each fit in seconds
(682, 7462)
(522, 2516)
(1040, 6522)
(686, 5316)
(510, 5181)
